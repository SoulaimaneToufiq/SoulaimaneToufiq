// SPDX-License-Identifier: MIT
pragma solidity 0.8.26;
    contract consumer {
        function getBalance () public view returns (uint){
            return address(this).balance;
        }

        function Deposit () public payable {}
    }  

contract Wallet {
    address payable Owner;
    mapping ( address => uint) public Allowance;
    mapping ( address => bool) public isAllowedTo;

    constructor (){
        Owner = payable (msg.sender);
    }


    function setAllowance (address payable _to , uint _amount) public {
        require(Owner == msg.sender,"You are not the owner");
        Allowance[_to] = _amount;
        if (_amount <= 0){
            isAllowedTo[_to] = true;
        }
        else {
            isAllowedTo[_to] = false;
        }

    }

    function Transfer(address payable _to, uint _amount, bytes memory payload) public returns (bytes memory){
        if (Owner != msg.sender){
            require ( Allowance[msg.sender] >= _amount,"You cant send more than your allowance, aborting");
            require ( isAllowedTo[msg.sender],"You are not allowed to send to this smart contract, aborting");
            Allowance[msg.sender] -= _amount;
        }
        (bool success , bytes memory returnData) = _to.call{value : _amount}(payload);
        require ( success , "Call failed !");
        return returnData;
    }

    receive () external payable {

    }
}